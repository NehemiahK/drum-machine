{"version":3,"sources":["logo.svg","components/Drumpad.jsx","components/DrumMachine.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Drumpad","props","className","onClick","playSound","item","previewLabel","id","str","replace","src","drumpads","DrumMachine","useState","display","setDisplay","useEffect","document","addEventListener","playAudio","e","keyPressed","String","fromCharCode","keyCode","el","find","element","displayValue","sound","getElementById","play","map","pad","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,oHCc5BC,EATC,SAACC,GACb,OAAQ,yBAAKC,UAAU,WAAWC,QAAS,kBAAMF,EAAMG,UAAUH,EAAMI,KAAMJ,EAAMK,eAC/EC,IALeC,EAKGP,EAAMK,aAJrBE,EAAIC,QAAQ,IAAK,OAKnBR,EAAMI,KACP,2BAAOH,UAAU,OAAOQ,IAAKT,EAAMS,IAAKH,GAAIN,EAAMI,QAPpC,IAACG,GCCjBG,EAAW,CACb,CAAEN,KAAM,IAAKK,IAAK,0DAA2DJ,aAAc,WAC3F,CAAED,KAAM,IAAKK,IAAK,0DAA2DJ,aAAc,WAC3F,CAAED,KAAM,IAAKK,IAAK,0DAA2DJ,aAAc,WAC3F,CAAED,KAAM,IAAKK,IAAK,6DAA8DJ,aAAc,cAC9F,CAAED,KAAM,IAAKK,IAAK,2DAA4DJ,aAAc,YAC5F,CAAED,KAAM,IAAKK,IAAK,2DAA4DJ,aAAc,YAC5F,CAAED,KAAM,IAAKK,IAAK,0DAA2DJ,aAAc,eAC3F,CAAED,KAAM,IAAKK,IAAK,gEAAiEJ,aAAc,eACjG,CAAED,KAAM,IAAKK,IAAK,+DAAgEJ,aAAc,eAsCrFM,EAnCK,WAAO,IAAD,EAEQC,mBAAS,IAFjB,mBAEfC,EAFe,KAENC,EAFM,KAItBC,qBAAU,WACNC,SAASC,iBAAiB,UAAWC,KACtC,IAEH,IAAMA,EAAY,SAACC,GACf,IAAIC,EAAaC,OAAOC,aAAaH,EAAEI,SACjCC,EAAKd,EAASe,MAAK,SAAAC,GAAO,OAAIA,EAAQtB,OAASgB,KAEjDI,GACArB,EAAUqB,EAAGpB,KAAMoB,EAAGnB,eAIxBF,EAAY,SAACiB,EAAYO,GAC3B,IAAIC,EAAQZ,SAASa,eAAeT,GACpCN,EAAWa,GACXC,EAAME,QAGV,OAAQ,yBAAKxB,GAAG,gBACZ,yBAAKA,GAAG,WAAWO,GACnB,yBAAKZ,UAAU,mBACVS,EAASqB,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,eAASC,IAAKD,EAAI5B,MAAU4B,EAA5B,CAAiC7B,UAAWA,WC3BhE+B,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,2DACA,kBAAC,EAAD,QCGckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASa,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2240b10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react'\n\nconst spaceReplacer = (str) => {\n    return str.replace(' ', '-')\n}\nconst Drumpad = (props) => {\n    return (<div className='drum-pad' onClick={() => props.playSound(props.item, props.previewLabel)}\n        id={spaceReplacer(props.previewLabel)}>\n        {props.item}\n        <audio className='clip' src={props.src} id={props.item} />\n    </div>)\n}\n\n\nexport default Drumpad","import React, { useEffect, useState } from 'react'\nimport Drumpad from './Drumpad'\n\nconst drumpads = [\n    { item: 'Q', src: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3', previewLabel: 'Chord 1' },\n    { item: 'W', src: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3', previewLabel: 'Chord 2' },\n    { item: 'E', src: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3', previewLabel: 'Chord 3' },\n    { item: 'A', src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3', previewLabel: 'Kick n Hat' },\n    { item: 'S', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3', previewLabel: 'Heater 1' },\n    { item: 'D', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3', previewLabel: 'Heater 2' },\n    { item: 'Z', src: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3', previewLabel: 'Break Snare' },\n    { item: 'X', src: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3', previewLabel: 'Punchy Kick' },\n    { item: 'C', src: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3', previewLabel: 'Side Stick' },\n]\n\nconst DrumMachine = () => {\n\n    const [display, setDisplay] = useState('')\n\n    useEffect(() => {\n        document.addEventListener('keydown', playAudio);\n    }, [])\n\n    const playAudio = (e) => {\n        let keyPressed = String.fromCharCode(e.keyCode)\n        const el = drumpads.find(element => element.item === keyPressed)\n\n        if (el) {\n            playSound(el.item, el.previewLabel)\n        }\n    }\n\n    const playSound = (keyPressed, displayValue) => {\n        let sound = document.getElementById(keyPressed)\n        setDisplay(displayValue)\n        sound.play();\n    }\n\n    return (<div id='drum-machine'>\n        <div id='display'>{display}</div>\n        <div className='drumpad-wrapper'>\n            {drumpads.map((pad) => <Drumpad key={pad.item} {...pad} playSound={playSound} />)}\n        </div>\n\n\n    </div>\n\n    )\n}\n\nexport default DrumMachine","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport DrumMachine from './components/DrumMachine';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Drum Machine - freeCodeCamp</h2>\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}